/*
They are used frequently in JavaScript and, no matter your JavaScript skill level, you will no doubt encounter them.

What is a closure?
A closure is an inner function that has access to the outer (enclosing) functions variablesâ scope chain.

The closure has three scope chains:
  it has access to its own scope (variables defined between its curly brackets).
  it has access to the outer functions variables.
  it has access to the global variables.

The inner function has access not only to the outer functions variables, but also to the outer functions parameters.
*/

//example closure
$(function() {
  var selections = [];
  $(".button").click(function() { // this closure has access to the selections variable
    selections.push (this.prop("name")); // update the selections variable in the outer function's scope
  });
});



//Closures have access to the outer functions variable even after the outer function returns:
function celebrityName (firstName) {
    var nameIntro = "This celebrity is ";
    // this inner function has access to the outer function's variables, including the parameter
   function lastName (theLastName) {
        return nameIntro + firstName + " " + theLastName;
    }
    return lastName;
}

var mjName = celebrityName ("Michael"); // At this juncture, the celebrityName outer function has returned.

// The closure (lastName) is called here after the outer function has returned above
// Yet, the closure still has access to the outer function's variables and parameter
mjName ("Jackson"); // This celebrity is Michael Jackson


//Closures store references to the outer functions variables, used to create Private Variables
function celebrityID () {
    var celebrityID = 999;
    // We are returning an object with some inner functions
    // All the inner functions have access to the outer function's variables
    return {
        getID: function ()  {
            // This inner function will return the UPDATED celebrityID variable
            // It will return the current value of celebrityID, even after the changeTheID function changes it
          return celebrityID;
        },
        setID: function (theNewID)  {
            // This inner function will change the outer function's variable anytime
            celebrityID = theNewID;
        }
    }

}

var mjID = celebrityID (); // At this juncture, the celebrityID outer function has returned.
mjID.getID(); // 999
mjID.setID(567); // Changes the outer function's variable
mjID.getID(); // 567: It returns the updated celebrityId variable





